Alex Smith.–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.120491

'''
    –ü–æ—Ç–æ–º –¥–æ–±–∞–≤—å –¥–≤–∞ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (—á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "Add to cart"). –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º. –í —Å–ª—É—á–∞–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ XPath. –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–ø–æ–º–Ω–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
'''

---------

# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
product_elements = driver.find_elements(By.CLASS_NAME, 'inventory_item')

# –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
for product_element in product_elements:

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product_name = product_element.find_element(By.CLASS_NAME, 'inventory_item_name').text

    # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
    product_price = float(product_element.find_element(By.CLASS_NAME, 'inventory_item_price').text.strip('$'))

    # XPath –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    add_to_cart_btn = product_element.find_element(By.TAG_NAME, 'button').get_attribute('id')

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
    product_info = {
        'name': product_name,
        'price': product_price,
        'btn_id': add_to_cart_btn
    }
    products.append(product_info)


selected_products = [{'name': 'Sauce Labs Backpack', 'price': 29.99, 'btn_id': 'add-to-cart-sauce-labs-backpack'}, {'name': 'Sauce Labs Onesie', 'price': 7.99, 'btn_id': 'add-to-cart-sauce-labs-onesie'}]

cart_products = [{'name': 'Sauce Labs Backpack', 'price': 29.99}, {'name': 'Sauce Labs Onesie', 'price': 7.99}]


# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
selected_products = [{'name': 'Sauce Labs Backpack', 'price': 29.99, 'btn_id': 'add-to-cart-sauce-labs-backpack'}, {'name': 'Sauce Labs Onesie', 'price': 7.99, 'btn_id': 'add-to-cart-sauce-labs-onesie'}]
cart_products = [{'name': 'Sauce Labs Backpack', 'price': 29.99}, {'name': 'Sauce Labs Onesie', 'price': 7.99}]

# –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –∏ —Ü–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
selected_names = set(product['name'] for product in selected_products)
selected_prices = set(product['price'] for product in selected_products)

# –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –∏ —Ü–µ–Ω –≤ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
cart_names = set(product['name'] for product in cart_products)
cart_prices = set(product['price'] for product in cart_products)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –∏–º–µ–Ω –∏ —Ü–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
if selected_names == cart_names and selected_prices == cart_prices:
    print("–ò–º–µ–Ω–∞ –∏ —Ü–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã.")
else:
    print("–ò–º–µ–Ω–∞ –∏/–∏–ª–∏ —Ü–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã.")


---
‚Äã
–ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:¬†

PytestUnknownMarkWarning: Unknown pytest.mark.run - is this a typo?  You
can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html

–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, —Ç–æ –Ω—É–∂–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–º –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–µ—Å—Ç—ã) —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª pytest.ini –∏ –≤ –Ω–µ–º –ø–æ–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç

[pytest]
markers =
    run: Run the test functions or type what you need

–°–ø–∞—Å–∏–±–æ¬†@–î–∞—Ä—å—è_–°–∏–º–∞–∫–æ–≤–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ –∑–∞ –æ—Ç—Å—ã–ª–∫—É –∫ –∫–Ω–∏–≥–µ. –ù–∞—à–µ–ª —Ä–µ—à–µ–Ω–∏–µ —Ç—É—Ç¬†https://habr.com/ru/articles/448796/

‚Äã

---
https://t.me/aqa_python/487

–ü—Ä–æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç–∏–ø—ã –≤ —Å–≤–æ—ë–º –∫–æ–¥–µ, —Ç–æ–≥–¥–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
–ù–∞–ø—Ä–∏–º–µ—Ä
def find(self, locator: Tuple[str, str], timeout: int = None) -> WebElement:
    return WebDriverWait(driver=self.driver, timeout=timeout).until(
        EC.presence_of_element_located(locator)
    )

---
https://t.me/comments_qa4/2006
–í–æ–ø—Ä–æ—Å –∏–∑ —á–∞—Ç–∞ https://t.me/aqa_python –≤–¥–æ—Ö–Ω–æ–≤–∏–ª –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç, –¥—É–º–∞—é –º–Ω–æ–≥–∏–º –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ)

‚è≥ –ü—Ä–æ–±–ª–µ–º–∞—Ç–∏–∫–∞: –ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Å–¥–µ–ª–∞—Ç—å healthcheck-—Ç–µ—Å—Ç!

‚ùì–í—Å—Ç–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä–æ? 

üü¢–û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É requests + pytest! 

1. –ú—ã –ø–æ–º–µ—â–∞–µ–º –≤—Å–µ urls –≤ —Ñ–∞–π–ª (–°–∫—Ä–∏–Ω—à–æ—Ç 1)
2. –ü–∏—à–µ–º —Ç–µ—Å—Ç (–°–∫—Ä–∏–Ω—à–æ—Ç 2)

üëå –ù–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —è –æ–ø–∏—Å–∞–ª –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π healthcheck-—Ç–µ—Å—Ç (–∏–∑ –Ω–µ–≥–æ –º—ã –ø–æ–ª—É—á–∏–º –ø–æ —Ç–µ—Å—Ç—É –Ω–∞ –∫–∞–∂–¥—ã–π URL). 

–ü–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –≤ –∫–æ–¥–µ –¥—É–º–∞—é –≤—Å–µ –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ)

P.S. –≠—Ç–æ –ª–∏—à—å –ø—Ä–∏–º–µ—Ä, –≥–ª—É–±–∏–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!


---
https://t.me/aqa_python/619
@pytest.fixture(scope="function", autouse=True)
def chrome_driver(request):
    options = Options()
    # options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    driver = webdriver.Chrome(options=options)
    request.cls.chrome_driver = driver
    yield driver
    driver.quit()